---
stages:
- name: Build Stage(Stub)
  inputs:
  - type: git
    branch: ${GIT_BRANCH_NAME}
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  properties:
  - name: JAVA_HOME
    value: /opt/IBM/java8
    type: text
  jobs:
  - name: Build
    type: builder
    working_dir: StubParent
    artifact_dir: ${WORKSPACE}/StubParent/StubEar/target
    build_type: maven
    script: |-
      #!/bin/bash
      # build the application 
      mvn -B package       
      
- name: Deploy Stage(Stub)
  inputs:
  - type: job
    stage: Build Stage(Stub)
    job: Build
  triggers:
  - type: stage
  properties:
  - name: JAVA_HOME
    value: /opt/IBM/java8
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${STUB_APP_NAME}
    script: |
      #!/bin/bash
      cf push "${CF_APP}" -p StubEar-1.0.1.ear -m 256M --no-start
      cf set-env ${CF_APP} JBP_CONFIG_LIBERTY "app_archive: {features: [cdi-1.2, concurrent-1.0, jaxb-2.2, jndi-1.0, jaxws-2.2, jsonp-1.0, jaxrs-2.0, javaMail-1.5, json-1.0, jsf-2.2, localConnector-1.0, servlet-3.1, wasJmsClient-2.0, wasJmsServer-1.0, websocket-1.1]}"
      cf start "${CF_APP}"
      # ==== enable shell ==============
      #echo === "${CF_APP}" ===
      #cf set-env "${CF_APP}" BLUEMIX_APP_MGMT_ENABLE devconsole+shell
      #cf restage "${CF_APP}"
      # ==== enable logs ===============
      #cf logs "${CF_APP}"
- name: Build Stage(AIF)
  inputs:
  - type: git
    branch: ${GIT_BRANCH_NAME}
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  properties:
  - name: JAVA_HOME
    value: /opt/IBM/java8
    type: text
  jobs:
  - name: Build
    type: builder
    working_dir: AIFParent
    artifact_dir: ${WORKSPACE}/AIFParent/AIF/target
    build_type: maven
    script: |-
      #!/bin/bash
      #mvn -B package -e -Pbluemix
      mvn -B package -e 
      cp -r ${WORKSPACE}/wlp ${WORKSPACE}/AIFParent/AIF/target/wlp
      
      cp -r ${WORKSPACE}/dockerfiles ${WORKSPACE}/AIFParent/AIF/target/dockerfiles
      ls ${WORKSPACE}/AIFParent/AIF/target/wlp  
- name: Build Stage (AIF Container)
  inputs:
  - type: job
    stage: Build Stage(AIF)
    job: Build
  triggers:
  - type: commit
  properties:
  - name: JAVA_HOME
    value: /opt/IBM/java8
    type: text
  jobs:
  - name: Container build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
    IMAGE_NAME: ${AIF_APP_NAME}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |
      #!/bin/bash
      echo -------------start server packaging---------------------
      #!/bin/bash
      #サーバーパッケージ
      cp AIF-1.0.1.war wlp/usr/servers/defaultServer/apps/AIF-1.0.1.war
      chmod +x wlp/bin/*
      wlp/bin/server package defaultServer --archive=was.zip --include=usr  
      cp wlp/usr/servers/defaultServer/was.zip dockerfiles/was.zip
      echo -------------start conatiner building-------------------      
      if [ $(cf ic images | grep ${APP_NAME}  | wc -l) -gt 0 ]; then
       echo -e "${red}Image ${APP_NAME} exists in the registory, delete it and re-upload as anew version of the image.${no_color}"
       cf ic rmi $(cf ic images | grep ${APP_NAME} | awk '{print $3}')
      else
       echo "Image ${APP_NAME} doesn't exist."
      fi
      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.  
      echo -e "${label_color}Starting build script${no_color}"
      # The IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix 
      #####################
      # Run unit tests    #
      #####################
      echo -e "${label_color}No unit tests cases have been checked in ${no_color}"   
      ######################################
      # Build Container via Dockerfile     #
      ######################################
      # REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      export FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:latest  
      cd dockerfiles
      # Possible adding retries to build the image
      if [ -f Dockerfile ]; then 
          echo -e "${label_color}BUILDING ${FULL_REPOSITORY_NAME} ${no_color}"
          ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
          # build image
          BUILD_COMMAND=""
          if [ "${USE_CACHED_LAYERS}" == "true" ]; then 
              BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/dockerfiles"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          else 
              BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}/dockerfiles"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          fi   
          if [ $RESULT -ne 0 ]; then
              echo -e "${red}Error building image ${no_color}" | tee -a "$ERROR_LOG_FILE"
              echo "Build command: ice ${BUILD_COMMAND}"
              ice info 
              ice images
              ${EXT_DIR}/print_help.sh
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed"
              exit 1
          else
              ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
              echo -e "${green}Container build of ${FULL_REPOSITORY_NAME} was successful ${no_color}"
          fi  
      else 
          echo -e "${red}Dockerfile not found at the repository root${no_color}"
          exit 1
      fi  
      ######################################################################################
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
      ######################################################################################
      echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
      if [ -f deployment.yml ]; then
          #Update deployment.yml with image name
          echo "UPDATING DEPLOYMENT MANIFEST:"
          sed -i "s~^\([[:blank:]]*\)image:.*$~\1image: ${FULL_REPOSITORY_NAME}~" deployment.yml
          cat deployment.yml
          cp deployment.yml $ARCHIVE_DIR/
      else 
          echo -e "${red}Kubernetes deployment file 'deployment.yml' not found at the repository root${no_color}"
          exit 1
      fi      
- name: setEnv
  inputs:
  - type: git
    branch: ${GIT_BRANCH_NAME}
    service: ${SAMPLE_REPO}
  triggers:
  - type: stage
  properties:
  - name: JAVA_HOME
    value: /opt/IBM/java8
    type: text
  - name: PATH
    value: ${JAVA_HOME}/bin:$PATH
    type: text
  - name: CLOUDANT_URL
    value: ${CLOUDANT_URL}
    type: text
  jobs:
  - name: Build
    type: builder
    working_dir: SFDParent/SFDEnvSet
    artifact_dir: target
    build_type: maven
    script: |-
      #!/bin/bash
      AIF_URL=$(curl -X GET ${CLOUDANT_URL}/kubernetescredential/kubecred | awk -F\"aif_url\" '{print $2}' | awk -F\" '{print $2}')
      AIF_PORT=$(curl -X GET ${CLOUDANT_URL}/kubernetescredential/kubecred | awk -F\"aif_port\" '{print $2}' | awk -F\" '{print $2}')
      
      APP_URL=${AIF_URL}:${AIF_PORT}
      echo -----$APP_URL
      
      URL=${APP_URL}/aif
      LIST=${WORKSPACE}/SFDParent/SFDEnvSet/URIConvert/BluemixConvertList.txt
      
      mvn install
      
      # 実行
      java -cp "${ARCHIVE_DIR}/lib/*" com.ibm.cis.aif.sfd.URIConverter.OutboundURIConverter "$LIST" "$URL"

- name: Test Stage
  inputs:
  - type: git
    branch: ${GIT_BRANCH_NAME}
    service: ${SAMPLE_REPO}
  triggers:
  - type: stage
  properties:
  - name: CLOUDANT_URL
    value: ${CLOUDANT_URL}
    type: text
  - name: JMeter_Path
    value: ${JMETER_PATH}
    type: text
  jobs:
  - name: Test
    type: tester
    tester_type: simple
    script: |-
      #!/bin/bash
      # ここでテストを起動します
      
      # Jmeter の実行時のバージョンを強制的にJava8にする。
      export JAVA_HOME=/opt/IBM/java8
      export PATH=${JAVA_HOME}/bin:$PATH
      
      AIF_URL=$(curl -X GET ${CLOUDANT_URL}/kubernetescredential/kubecred | awk -F\"aif_url\" '{print $2}' | awk -F\" '{print $2}')
      AIF_PORT=$(curl -X GET ${CLOUDANT_URL}/kubernetescredential/kubecred | awk -F\"aif_port\" '{print $2}' | awk -F\" '{print $2}')
      
      echo $WORKSPACE
      echo ======================================
      javac -version
      echo ======================================
      mvn install:install-file -Dfile=${WORKSPACE}/AIFParent/lib/com.ibm.cis.aif.jar -DgroupId=AIF -DartifactId=com.ibm.cis.aif -Dversion=1.1 -Dpackaging=jar -DgeneratePom=true
      mvn install:install-file -Dfile=${WORKSPACE}/AIFParent/lib/com.ibm.cis.aif.tools.et.jar -DgroupId=AIF -DartifactId=com.ibm.cis.aif.tools.et -Dversion=1.1 -Dpackaging=jar -DgeneratePom=true
      
      mvn integration-test  -Dtarget.host=${AIF_URL} -Dtarget.port=${AIF_PORT} -Dcom.ibm.cis.aif.sfd.CloudantAccessor.dbName=aifdump -DJMeterPath=${JMeter_Path} -Dcom.ibm.cis.aif.sfd.SFDTestCase.contextURL=${AIF_URL}:${AIF_PORT}/aif -Dcom.ibm.cis.aif.sfd.CloudantAccessor.url=${CLOUDANT_URL}
    working_dir: 'SFDParent/SFDTester'
    enable_tests: true
    test_file_pattern: 'target/failsafe-reports/TEST-*.xml'
